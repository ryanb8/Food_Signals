# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# FP_20162516.py
# Created on: 2016-11-25 15:28:39.00000
#   (generated by ArcGIS/ModelBuilder)
# Updated by Ryan Boyer on 2016-11-25
#   as Model Builder is struggling with iterated loops
#   and inline variable names
# Usage: FP_20162516 <D> <GS_In_ACR> <g_or_r> 
#   Load into an ArcMap Tool box, and follow prompts
# Description: 
#   Takes a collection of point data sets and a collection of buffer 
# ---------------------------------------------------------------------------

# Import modules
import arcpy
import os
import string # May not work with ArcMap??? Unknown...
import csv
import domainvalues

# Load required toolboxes
#arcpy.ImportToolbox("Model Functions")
arcpy.ImportToolbox("C:/Users/Ryan Boyer/Documents/PLAN5120/downloaded_tools/ExcelTools/Excel and CSV Conversion Tools.tbx")

# Script arguments
# Set Buffer_Distance - Set to multiple in script paramters and pass all desired distances
D = arcpy.GetParameter(0)
arcpy.AddMessage(D)  #Show to user
arcpy.AddMessage(len(D))
#arcpy.AddMessage(D.split(";")[0])
#D = D.split(";")
#arcpy.AddMessage(D)
if D == '#' or not D:
    D = "0.25 Miles" # provide a default value if unspecified LEAVE FOR NOW

# Grocery Stores or Restaurants Data - Set to multiple in script paramters and pass both
GS_In_ACR = arcpy.GetParameterAsText(1)
arcpy.AddMessage(GS_In_ACR)  # Show to user
if GS_In_ACR == '#' or not GS_In_ACR:
    GS_In_ACR = "GS_In_ACR" # provide a default value if unspecified LEAVE FOR NOW
GS_In_ACR = GS_In_ACR.split(";")
arcpy.AddMessage(GS_In_ACR)

GS_In_ACR_in_mem = GS_In_ACR
for num in range(len(GS_In_ACR_in_mem)):
	arcpy.AddMessage(num)
	arcpy.MakeFeatureLayer_management(GS_In_ACR_in_mem[num], "in_memory\base_layer"+str(num))
	my_str = 'in_memory\base_layer'+str(num)
	GS_In_ACR_in_mem[num] = my_str

# Data for Clip (backboard)
Data_for_Clip = arcpy.GetParameterAsText(2)
arcpy.AddMessage(Data_for_Clip)
arcpy.MakeFeatureLayer_management(Data_for_Clip, "in_memory\Data_for_Clip")
Data_for_Clip = "in_memory\Data_for_Clip"

# Data Output
output = arcpy.GetParameterAsText(3)
arcpy.AddMessage(output)

arcpy.AddMessage("length of D")
arcpy.AddMessage(len(D))
	
# Local variables:
# I_GS_In_ACR_OBJECTID = GS_In_ACR

# Temp Variables
Grocery_Stores_Buffer = "in_memory\Buffers"
Grocery_Stores_Buffer_Clip = "in_memory\BuffersClip"
ACR_CensusTracts2_Clip = Grocery_Stores_Buffer_Clip
ACR_CensusTracts2_Clip__2_ = ACR_CensusTracts2_Clip

# Header
header_flag = False

# Iterate through buffers
i = 0
for D_value in D:
	# Iterate through layers
	j = 0
	for I_GS_In_ACR_OBJECTID in GS_In_ACR_in_mem: #range(len(GS_In_ACR)):
		#local data
		#I_GS_In_ACR_OBJECTID = GS_In_ACR[j]
		#D_value = D[i]
		#total_rows = int(arcpy.GetCount_management(I_GS_In_ACR_OBJECTID).getOutput(0))
		arcpy.AddMessage(type(I_GS_In_ACR_OBJECTID))
		arcpy.AddMessage(I_GS_In_ACR_OBJECTID)
		#arcpy.AddMessage("in_memory\base_layer"+str(j))
		arcpy.SelectLayerByAttribute_management(I_GS_In_ACR_OBJECTID, "CLEAR_SELECTION")
		rows = arcpy.SearchCursor(I_GS_In_ACR_OBJECTID)
		count = 1
		for row in rows:
			#arcpy.AddMessage("    "+row.name)
			#arcpy.AddMessage("    count = {0}".format(count))
			#select point:
			#Syntax : SelectLayerByAttribute_management (in_layer_or_view, {selection_type}, {where_clause}, {invert_where_clause})
			
			arcpy.SelectLayerByAttribute_management(I_GS_In_ACR_OBJECTID, "NEW_SELECTION", "\"OBJECTID\" = " + str(count))

			#Create Buffer Around Point
			#Syntax : Buffer_analysis (in_features, out_feature_class, buffer_distance_or_field, {line_side}, {line_end_type}, {dissolve_option}, {dissolve_field}, {method})
			arcpy.Buffer_analysis(I_GS_In_ACR_OBJECTID, 
			                      Grocery_Stores_Buffer, 
								  D_value, "FULL", "ROUND", "NONE", "", "PLANAR")
								  # I_GS_In_ACR_OBJECTID
								  
			#Clip from base layer around points
			#Syntax : Clip_analysis (in_features, clip_features, out_feature_class, {cluster_tolerance})
			arcpy.Clip_analysis(Data_for_Clip, 
							    Grocery_Stores_Buffer, Grocery_Stores_Buffer_Clip, "")
			
			# Add Area and Calc Fields:
			# Syntax : AddField_management (in_table, field_name, field_type, {field_precision}, {field_scale}, {field_length}, {field_alias}, {field_is_nullable}, {field_is_required}, {field_domain})
			# Syntax : CalculateField_management (in_table, field, expression, {expression_type}, {code_block})
			#New_Area
			arcpy.AddField_management(Grocery_Stores_Buffer_Clip, "new_area", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
			arcpy.CalculateField_management(Grocery_Stores_Buffer_Clip, "new_area", "!shape.area@SQUAREYARDS!", "PYTHON_9.3", "")
			
			#buffer_val
			arcpy.AddField_management(Grocery_Stores_Buffer_Clip, "buffer_val", "STRING", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
			buf_val = "\"" + str(D_value) + "\""
			arcpy.CalculateField_management(Grocery_Stores_Buffer_Clip, "buffer_val", buf_val , "PYTHON_9.3", "")
		
			#Point_Layer
			arcpy.AddField_management(Grocery_Stores_Buffer_Clip, "point_layer", "STRING", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
			point_lay_val = "\"" + str(I_GS_In_ACR_OBJECTID)[-6:] + "\""
			arcpy.CalculateField_management(Grocery_Stores_Buffer_Clip, "point_layer", point_lay_val , "PYTHON_9.3", "")
		
			#Point Obj_ID
			arcpy.AddField_management(Grocery_Stores_Buffer_Clip, "point_id", "STRING", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
			point_id_val = "\"" + str(row.getValue("OBJECTID")) +"\""
			arcpy.CalculateField_management(Grocery_Stores_Buffer_Clip, "point_id", point_id_val , "PYTHON_9.3", "")

			#Point Name
			arcpy.AddField_management(Grocery_Stores_Buffer_Clip, "point_name", "STRING", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
			point_name_val = "\"" + str(row.getValue("Name")) + "\"" 
			arcpy.CalculateField_management(Grocery_Stores_Buffer_Clip, "point_name", point_name_val , "PYTHON_9.3", "")

			#Point Description
			arcpy.AddField_management(Grocery_Stores_Buffer_Clip, "point_desc", "STRING", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
			point_desc_val = "\"" + str(row.getValue("Description")) + "\"" 
			arcpy.CalculateField_management(Grocery_Stores_Buffer_Clip, "point_desc", point_desc_val , "PYTHON_9.3", "")
			
			#Next Point:
			count += 1
			
			# Append to CSV:
			out_writer = csv.writer(open(output, 'ab'), dialect='excel')
			# return the list of field names and field values
			header, rows2 = domainvalues.header_and_iterator(Grocery_Stores_Buffer_Clip)
			
			# write the field names and values to the csv file
			if not header_flag:
				out_writer.writerow(map(domainvalues._encodeHeader, header))
				header_flag = True
			for row2 in rows2:
				out_writer.writerow(map(domainvalues._encode, row2))
			
		arcpy.AddMessage("{0} of {1} buffers".format(i+1,len(D)))
		arcpy.AddMessage("{0} of {1} point sets".format(j+1, len(GS_In_ACR)))
		arcpy.AddMessage("Pass {0} of {1}".format(i*len(GS_In_ACR)+j+1, len(D)*len(GS_In_ACR)))
		j += 1
	i += 1

			
			
	

# Export 


# # Process: Iterate Row Selection
# arcpy.IterateRowSelection_mb(GS_In_ACR, "OBJECTID #", "false")

# # Process: Buffer
# arcpy.Buffer_analysis(I_GS_In_ACR_OBJECTID, Grocery_Stores_Buffer, D, "FULL", "ROUND", "NONE", "", "PLANAR")

# # Process: Clip
# arcpy.Clip_analysis(ACR_CT_with_buffer, Grocery_Stores_Buffer, Grocery_Stores_Buffer_Clip, "")

# # Process: Add Field
# arcpy.AddField_management(Grocery_Stores_Buffer_Clip, "new_area", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# # Process: Calculate Field
# arcpy.CalculateField_management(ACR_CensusTracts2_Clip, "new_area", "!shape.area@SQUAREYARDS!", "PYTHON_9.3", "")

# Process: TableToCSV
# arcpy.TableToCSV_tableconversion(ACR_CensusTracts2_Clip__2_, v_g_or_r___D___obj_id__csv, "COMMA")

